# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")

      "${builtins.fetchGit {
        url = "https://github.com/NixOS/nixos-hardware.git";
        rev = "3c5e12673265dfb0de3d9121420c0c2153bf21e0";
      }}/common/gpu/intel/skylake"
    ];

  # Fails to boot very very early on initrd command (currently idk why)
  powerManagement.cpuFreqGovernor = "performance";
  hardware.cpu.intel.updateMicrocode = true;
  hardware.enableRedistributableFirmware = true;
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usbhid" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.kernelParams = [ "nosmt" "intel_pstate=enable" "intel_energy_perf_bias=normal"  ];
  boot.extraModulePackages = [ ];
  boot.extraModprobeConfig = ''
    blacklist nouveau
    options nouveau modeset=0
  '';

  services.udev.extraRules = ''
    # Remove NVIDIA USB xHCI Host Controller devices, if present
    ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c0330", ATTR{power/control}="auto", ATTR{remove}="1"

    # Remove NVIDIA USB Type-C UCSI devices, if present
    ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c8000", ATTR{power/control}="auto", ATTR{remove}="1"

    # Remove NVIDIA Audio devices, if present
    ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x040300", ATTR{power/control}="auto", ATTR{remove}="1"

    # Remove NVIDIA VGA/3D controller devices
    ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x03[0-9]*", ATTR{power/control}="auto", ATTR{remove}="1"
  '';
  boot.blacklistedKernelModules = [ "nouveau" "nvidia" "nvidia_drm" "nvidia_modeset" ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/1f806774-e35d-4212-b876-453a5de8fbef";
      fsType = "xfs";
    };

  fileSystems."/datahdd" =
    { device = "/dev/disk/by-label/nixosdata";
      fsType = "xfs";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/30BA-2855";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [
      {
        device = "/dev/disk/by-uuid/234d10e4-f450-4956-927c-89c6641250b8";
      }];

  #networking.interfaces.enp3s0f1.useDHCP = lib.mkDefault true;
  #networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;
  systemd.services.set-asus-fan = {
    description = "Set ASUS NB WMI fan speed";
    wantedBy = [ "multi-user.target" ];
    script = ''
      for dir in /sys/devices/platform/asus-nb-wmi/hwmon/*; do
        if [ "$(cat "$dir/name")" = "asus" ]; then
          echo "ASUS fan handle found in directory: $dir"
          echo 0 > "$dir/pwm1_enable"
        fi
      done
      echo "[set-asus-fan] Ending ASUS fan configuration..."
    '';
    serviceConfig = {
      Type = "oneshot";
      User = "root";
      Group = "root";
    };
  };
  systemd.services.set-asus-cpu = {
    description = "Set ASUS CPU freq";
    wantedBy = [ "multi-user.target" ];
    script = ''
      for dir in /sys/devices/system/cpu/cpu*/power/energy_perf_bias; do
        echo 0 > "$dir"
      done
      echo "[set-asus-cpu] Ending ASUS cpu configuration..."

      # GPU
      echo 1050 > /sys/class/drm/card1/gt/gt0/rps_cur_freq_mhz &>/dev/null || true

      echo "[set-asus-cpu] Ending ASUS gpu configuration..."
    '';
    serviceConfig = {
      Type = "oneshot";
      User = "root";
      Group = "root";
    };
  };

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
